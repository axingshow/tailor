// Code generated by go-bindata.
// sources:
// assets/tailor.css
// assets/tailor.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTailorCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x55\x4d\x8f\xc2\x36\x10\xfd\x2b\x88\x55\x6f\x04\x85\x0f\xa1\xe2\x48\x7b\xe9\xa5\x95\xb6\xa7\xae\xd4\x43\xd5\x83\x63\x4f\x88\xb5\xc6\x8e\x1c\xb3\xc0\x46\xfc\xf7\xce\xd8\x49\x48\x02\xf4\x80\x12\x9b\xf9\x7c\xef\xcd\x64\xf9\x99\xfc\x61\xa4\x12\xdc\x5b\xc7\x72\x28\xac\x83\x05\xde\xfd\xc9\x95\x61\xbc\xf0\xe0\x1a\x61\x8d\x07\xe3\xd9\x7c\x7e\xcb\xad\xbc\x2e\xca\xd5\x42\xab\x45\xb5\x38\xe9\xe6\xc8\xdd\x01\xed\xd2\xac\xe2\x52\x2a\x73\xc0\xb7\x02\xad\x93\x82\x1f\x95\xbe\xb2\x9a\x9b\x3a\xa9\xc1\xa9\xe2\x86\x21\xff\x56\x46\xda\x73\x73\x56\xd2\x97\x6c\x95\xa6\xbf\x64\x25\xa8\x43\xe9\xc3\x3b\x19\xfc\x0e\x5c\x62\xbe\xca\xd6\xca\x2b\x6b\x58\xa1\x2e\x20\x33\x6f\x2b\x0c\xab\xa1\xf0\xf8\x78\x74\xde\xa6\xd5\x25\xcb\xb9\xf8\x3a\x38\x7b\x32\x32\x11\x56\x63\x23\x6f\x69\x9a\x66\xb9\xbd\x24\x75\xc9\x31\x29\x5b\x55\x97\x59\xf8\xa1\xf5\x8c\xfe\xa4\x7c\x9f\xca\x6b\x68\x5a\x87\xa2\x28\xfa\x2e\x76\xad\x65\x6c\xa6\x56\x3f\xc0\x56\xbf\xe2\x51\x83\x47\x40\x92\xba\xe2\x82\xcc\x30\x60\x16\x11\x48\xa8\xc8\xf5\xfd\x18\xaa\x45\x8f\xdb\x10\xdd\x7b\x63\x3c\xaf\xad\x3e\x79\xc8\x5c\x68\x61\x4d\xa9\x28\xc2\x8a\x42\x0c\xea\x19\xa4\x5f\x4f\x82\xb5\x54\x35\x52\xd5\x95\xe6\x57\xa6\x8c\x56\x06\x92\x5c\x5b\xf1\x85\x8d\x3b\x04\x92\x0a\x9a\x61\x22\x25\x67\x6f\x00\xf0\x04\xa4\xfd\x7e\xdf\x23\x8a\x99\x7b\x3a\xf0\xfd\x1b\x9c\xc7\x4c\x3a\xe1\x5a\x1d\x0c\xf3\x70\xf1\x49\x6e\xbd\xb7\xc7\xae\xc7\x58\xfb\x8e\xd0\x0f\xe9\x12\xc7\xa5\x3a\xd5\x3d\x9b\x7d\xa9\x4b\xe8\x8a\x7d\xac\x40\x44\x26\xee\xb6\xe2\xb5\x6d\x5a\x04\x19\x91\x32\x5f\x88\xa8\x23\x30\xd0\xb1\x1d\x13\xb8\xdc\xc3\xf1\x36\x16\x76\x87\x9d\xe7\xb9\x86\x4c\x68\xe0\x08\xab\xf5\x25\x99\xfd\xa5\x24\xe4\xdc\x35\xc3\xe8\x85\xb6\xdc\x33\xe2\xb6\x45\x6d\xbd\x7b\x2e\x3e\x29\x65\x14\x9f\xfa\x21\x9d\xb4\xf8\xe0\x0d\x45\xfe\xb0\x87\x0f\x55\xfb\xa6\x25\x69\x75\x27\x49\x08\x31\x30\x98\x69\xd5\x68\x7c\x26\xb5\xbf\x6a\x60\xc6\x1a\xc8\xfa\x48\x44\x04\x8b\x6e\x14\xe0\xd1\x95\x69\x8e\xae\xa2\x54\x5a\x36\x63\x2f\x0a\x34\xb6\x7d\xe7\xcd\x18\xa7\xac\x43\x26\xca\xa9\x1b\x8b\x30\x3c\x9b\x6e\x38\x66\x61\x24\xda\x8e\x37\x9b\x4d\x16\x34\x22\x41\x58\xc7\x83\xca\x43\xc5\xbd\xe6\x1d\x68\xbc\xfe\x86\xcc\xa2\xb4\x10\xc9\x33\x2b\x95\x94\x60\xa2\x5b\x7f\x09\x5a\xab\xaa\x56\x75\x76\x2e\x95\x87\x30\x6a\xd4\xfb\xd9\xf1\x6a\x52\xf4\x92\x0b\x8a\xb7\x98\xb4\xc2\x4a\x8a\xf5\x44\x3e\x45\x21\xa7\x6d\xbf\x63\x78\xf3\x64\x2c\x49\x3e\xd4\x5c\x94\x38\xbd\xfd\xcf\x98\x0d\x75\xff\x62\xc6\x8e\x38\x2e\xad\x62\x10\x5c\x3a\xb5\xb2\xa2\xe3\x60\xde\x27\x43\x77\x44\x80\x50\x98\x01\xa0\x78\x23\x70\x0f\x83\x1b\xee\x85\x20\xc0\x67\x52\xeb\x59\xdb\x22\x55\xed\x2a\x7a\x44\x2f\x20\xf0\x1c\xc2\x08\xce\xcb\x91\xfd\x2d\x7e\x15\x9a\xe1\xc6\x8b\xf3\x30\x1c\x99\x9e\x57\x7e\xf2\xb6\x2d\xa1\x19\xe9\x29\x2e\x56\x02\xb5\xf3\x5b\xee\x26\x3a\x97\xf8\x80\x07\xa1\xbf\x24\x1a\x77\x5d\xdc\xee\x47\x98\xea\xba\x2d\xb6\x8d\xbb\x8d\xa8\x90\x61\xb7\x75\xfa\x6f\xdd\x3f\xf3\xf1\x9e\x5b\x0f\x6c\x27\x9f\xc5\x7f\xe7\xa3\xb5\x4f\x96\xff\x05\x00\x00\xff\xff\x23\xd0\x00\x7e\x55\x07\x00\x00")

func assetsTailorCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsTailorCss,
		"assets/tailor.css",
	)
}

func assetsTailorCss() (*asset, error) {
	bytes, err := assetsTailorCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tailor.css", size: 1877, mode: os.FileMode(420), modTime: time.Unix(1453533408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTailorJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x41\x6f\x1b\x2f\x10\xc5\xbf\x0a\xe6\xe0\x80\x96\x20\x47\xfa\x9f\xcc\x1f\xf5\x90\xa4\xea\xa1\x89\x0f\x4d\x4e\xd6\x2a\x5a\xad\x67\x63\x24\x3c\xe3\xb0\x50\xc7\x5a\xf1\xdd\xbb\xd8\x6b\xb7\xa7\xaa\x17\x34\x7a\x6f\x78\x33\xf3\x9b\x75\x09\xdb\xe8\x08\x19\x88\xa8\x50\x05\x39\x5c\x95\x5e\x90\x4a\x72\x70\x9d\x98\xe1\x9a\xea\x73\x15\x4f\xd5\xcf\x26\xb0\xc6\xf2\x4b\x2b\xb7\x36\x1e\xf7\x40\x1d\x0b\xf0\x91\x5c\x80\xf9\x7c\x2a\x4c\xf9\x93\xe6\xf3\x46\x06\x88\x29\x20\x6b\xc6\xd0\xd9\x42\x16\xdd\x5d\x34\x37\x69\x25\xb5\xb3\x08\x07\xf6\x18\x02\x05\xc1\xef\x1b\x44\x8a\xac\x73\xb8\x61\x3b\xda\x24\x0f\xec\x86\x57\x54\xf1\x1b\x2e\x4d\xdc\x06\x3a\xb0\x4e\xb7\xb4\x01\xcb\x9f\x56\x0f\xaf\xdf\x1f\xdf\x9e\x57\x2f\x6f\x5f\x57\xaf\xcf\x0f\x5c\x75\xb9\xe4\x79\x5b\x76\xb7\x03\x7c\xee\x29\xc4\x7e\x39\xe4\x6c\xca\x0d\xeb\x45\xad\xdb\xc6\x7b\xe1\xf5\x64\xa9\xcb\x35\x02\xce\x07\xa2\x3d\x35\xde\xd5\x6b\xa8\xcd\xb4\x6a\x2f\xf0\x0b\x2e\x41\x66\xe5\xd5\xef\x9f\xa0\xce\xec\xf2\xd4\x55\x46\x5e\xcc\xdc\x8d\x97\x94\x38\xf7\x2f\xbc\x14\xd9\x85\xa1\xff\x83\xf6\x80\xef\x71\x6b\xa8\xaa\x64\x2f\x42\x81\x7e\x5d\x21\x8b\xe1\x6e\xb9\xbe\x6e\x2b\x07\x9e\x7a\x60\x7d\x0c\xae\x8d\xdc\xcc\xfe\x30\xca\xd8\x5d\xe3\xd0\x6e\xa8\x4d\x3b\xc0\xa8\x3f\x12\x84\xe3\x0f\xf0\xd0\xc6\x02\x58\xbf\xdc\x3e\x8d\xfe\x48\xb3\xb4\xe9\x3e\x1e\x3d\xe8\x2d\xb8\xf7\x6d\xb4\x87\x91\x3a\x1d\xb4\x43\x84\xf0\xed\x24\xdd\xfe\xb7\xa8\xf8\xfe\x93\x9b\xbf\xc4\xdd\x13\xc6\xd1\xe1\x32\x8b\x11\xd2\x90\xeb\xf2\xa8\x11\xa2\x34\xbf\x02\x00\x00\xff\xff\xf4\x96\xdd\x85\x6c\x02\x00\x00")

func assetsTailorJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsTailorJs,
		"assets/tailor.js",
	)
}

func assetsTailorJs() (*asset, error) {
	bytes, err := assetsTailorJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tailor.js", size: 620, mode: os.FileMode(420), modTime: time.Unix(1453533408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tailor.css": assetsTailorCss,
	"assets/tailor.js": assetsTailorJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tailor.css": &bintree{assetsTailorCss, map[string]*bintree{}},
		"tailor.js": &bintree{assetsTailorJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

